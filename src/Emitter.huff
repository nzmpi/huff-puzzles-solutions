 /** 
 *  EMITTER HUFF EXERCISE
 *  
 *  The task is to enable this contract, when the function `value(uint256, uint256)` is called, should
 *  emit an event named `Value(uint256 indexed, uint256)`
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function value(uint256, uint256) payable returns()
 
#define event Value(uint256 indexed, uint256)

#define macro MAIN() = takes(0) returns(0) {
    // get the selector from calldata at offset 0
    push0 calldataload 0xe0 shr // [selector] -> 0xe0 = 224 = 256 - 32

    // check if the selector is correct, otherwise jump to revert
    __FUNC_SIG(value) sub error_dest jumpi

    0x24 calldataload   // [number2]
    push0 mstore        // []
    0x04 calldataload   // [number1]
    __EVENT_HASH(Value) // [eventSig, number1]
    0x20 push0 log2     // []
    push0 push0 return

    error_dest:
        push0 push0 revert   
}
