
/** 
 *  FOO_BAR HUFF EXERCISE
 *
 *  Majority of ethereum contracts hold logic divide this logic into functions which users can specify and call to execute a particular logic without clashing into the other
 *  
 *  The task is to write within the `MAIN` macro below, huff code that mimics 2 solidity functions. 
 *      - One named `foo()` that simply returns 2,
 *      - the second named `bar()` that simply returns 3.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function foo() payable returns(uint256)
#define function bar() payable returns(uint256)

#define macro MAIN() = takes(0) returns(0) {
    // get the selector from calldata at offset 0
    push0 calldataload 0xe0 shr // [selector] -> 0xe0 = 224 = 256 - 32

    // check if the selector is correct, otherwise jump to revert
    dup1 __FUNC_SIG(foo) eq foo_dest jumpi
    __FUNC_SIG(bar)      eq bar_dest jumpi
    push0 push0 revert

    foo_dest:
        0x02 push0 mstore // []
        return_dest jump

    bar_dest:
        0x03 push0 mstore // []

    return_dest:
        0x20 push0 return // []        
}